{"version":3,"sources":["logo.svg","helpers/time.js","components/Timer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getTimeParts","time","lastUnit","units","lastUnitIndex","findIndex","unit","dividers","dividersAcc","reduce","obj","index","Math","floor","ms","s","m","h","d","Timer","props","useState","timeValue","setTimeValue","progress","setProgress","useEffect","initialTime","console","log","timeId","setInterval","distance","Date","getTime","timeParts","timePartsSeconds","normalize","clearInterval","unscaledNum","minAllowed","maxAllowed","min","max","id","className","class","style","left","name","size","right","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,6ICApC,SAASC,EAAaC,EAAMC,GACjC,IAAMC,EAAQ,CAAC,KAAM,IAAK,IAAK,IAAK,KAC9BC,EAAgBD,EAAME,WAAU,SAACC,GAAD,OAAUA,IAASJ,KAEnDK,EAAW,CAAC,IAAM,GAAI,GAAI,GAAI,GAC9BC,EAAc,CAAC,EAAG,IAAM,IAAO,KAAS,OAsB9C,OAZeL,EAAMM,QAAO,SAACC,EAAKJ,EAAMK,GAStC,OAPED,EAAIJ,GADFK,EAAQP,EACE,EACHO,IAAUP,EACPQ,KAAKC,MAAMZ,EAAOO,EAAYG,IAE9BC,KAAKC,MAAMZ,EAAOO,EAAYG,IAAUJ,EAASI,GAGxDD,IAjBU,CACjBI,GAAI,EACJC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,I,0BCNA,SAASC,EAAMC,GAAQ,IAAD,EACOC,mBAAS,CAAEH,EAAG,GAAID,EAAG,GAAID,EAAG,GAAID,EAAG,KAD1C,mBACpBO,EADoB,KACTC,EADS,OAEKF,mBAAS,IAFd,mBAEpBG,EAFoB,KAEVC,EAFU,KAG3BC,qBAAU,WAAO,IACPC,EAAgBP,EAAhBO,YACRC,QAAQC,IAAI,cACZD,QAAQC,IAAIF,GACZ,IAAIG,EAASC,aAAY,WACvB,IAGIC,EAHU,IAAIC,KAAKN,GAAaO,WAClB,IAAID,MAAOC,UAI7BN,QAAQC,IAAI,YACZD,QAAQC,IAAIG,GACZ,IAAMG,EAAYnC,EAAagC,EAAU,KACnCI,EAAmBpC,EAAagC,EAAU,KAEhDJ,QAAQC,IAAI,oBACZD,QAAQC,IAAIO,EAAiBrB,GAC7B,IAAMS,EAAWa,EAAUD,EAAiBrB,EAAG,EAAG,GAAI,EAAG,SAIzD,OAHAU,EAAa,GAAKD,GAClBD,EAAaY,GAEN,WACLG,cAAcR,MAEf,OACF,IAEH,IAAMO,EAAY,SAACE,EAAaC,EAAYC,EAAYC,EAAKC,GAE3D,OADAf,QAAQC,IAAI,SAERY,EAAaD,IAAeD,EAAcG,IAASC,EAAMD,GAC3DF,GAIJ,OACI,yBAAKI,GAAG,SACN,yBAAKA,GAAG,QACL,IACAtB,EAAUJ,EAFb,IAEgB,uCAEhB,yBAAK0B,GAAG,SACL,IACAtB,EAAUL,EAFb,IAEgB,wCAEhB,yBAAK2B,GAAG,WACLtB,EAAUN,EADb,IACgB,0CAEhB,yBAAK4B,GAAG,WACLtB,EAAUP,EADb,IACgB,0CAEhB,yBAAK8B,UAAU,aACf,yBAAKC,MAAM,QACT,yBAAKA,MAAM,kBAAkBC,MAAO,CAAEC,KAAK,GAAD,OAAKxB,EAAL,OAC1C,kBAAC,IAAD,CAAOyB,KAAK,iBAAiBC,KAAK,QAElC,yBAAKJ,MAAM,mBAAmBC,MAAO,CAAEI,MAAM,GAAD,OAAK3B,EAAL,OAC5C,kBAAC,IAAD,CAAOyB,KAAK,aAAaC,KAAK,SAKhC,0BAAMJ,MAAM,YAAZ,+BC1DOM,MARf,WACE,OACE,yBAAKP,UAAU,IACb,kBAAC,EAAD,CAAOlB,YAAa,IAAIM,KAAK,gCCIfoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.f5ae7c55.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export function getTimeParts(time, lastUnit) {\n  const units = [\"ms\", \"s\", \"m\", \"h\", \"d\"];\n  const lastUnitIndex = units.findIndex((unit) => unit === lastUnit);\n\n  const dividers = [1000, 60, 60, 24, 1];\n  const dividersAcc = [1, 1000, 60000, 3600000, 86400000];\n\n  const startValue = {\n    ms: 0,\n    s: 0,\n    m: 0,\n    h: 0,\n    d: 0,\n  };\n\n  const output = units.reduce((obj, unit, index) => {\n    if (index > lastUnitIndex) {\n      obj[unit] = 0;\n    } else if (index === lastUnitIndex) {\n      obj[unit] = Math.floor(time / dividersAcc[index]);\n    } else {\n      obj[unit] = Math.floor(time / dividersAcc[index]) % dividers[index];\n    }\n\n    return obj;\n  }, startValue);\n\n  return output;\n}\n\nexport function now() {\n  return new Date();\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { getTimeParts } from \"../helpers/time\";\nimport Emoji from 'reactjs-emojis';\nimport \"./Timer.css\";\n\nexport function Timer(props) {\n  const [timeValue, setTimeValue] = useState({ d: \"\", h: \"\", m: \"\", s: \"\" });\n  const [progress, setProgress] = useState(\"\");\n  useEffect(() => {\n    const { initialTime } = props;\n    console.log(\"intialTime\");\n    console.log(initialTime);\n    let timeId = setInterval(() => {\n      let intinal = new Date(initialTime).getTime();\n      let currentTime = new Date().getTime();\n\n      let distance = intinal - currentTime;\n\n      console.log(\"distance\");\n      console.log(distance);\n      const timeParts = getTimeParts(distance, \"d\");\n      const timePartsSeconds = getTimeParts(distance, \"s\");\n\n      console.log(\"timePartsSeconds\");\n      console.log(timePartsSeconds.s);\n      const progress = normalize(timePartsSeconds.s, 0, 40, 0, 5953100);\n      setProgress((40 - progress));\n      setTimeValue(timeParts);\n\n      return () => {\n        clearInterval(timeId);\n      };\n    }, 1000);\n  }, []);\n\n  const normalize = (unscaledNum, minAllowed, maxAllowed, min, max) => {\n    console.log(\"here\");\n    return (\n      ((maxAllowed - minAllowed) * (unscaledNum - min)) / (max - min) +\n      minAllowed\n    );\n  };\n\n  return (\n      <div id=\"timer\">\n        <div id=\"days\">\n          {\" \"}\n          {timeValue.d} <span>Days</span>\n        </div>\n        <div id=\"hours\">\n          {\" \"}\n          {timeValue.h} <span>Hours</span>\n        </div>\n        <div id=\"minutes\">\n          {timeValue.m} <span>Minutes</span>\n        </div>\n        <div id=\"seconds\">\n          {timeValue.s} <span>Seconds</span>\n        </div>\n        <div className=\"timer-ftr\">\n        <div class=\"wrap\">\n          <div class=\"slide slideLeft\" style={{ left: `${progress}%` }}>\n          <Emoji name=\"hatching_chick\" size=\"40\"/> \n          </div>\n          <div class=\"slide slideRight\" style={{ right: `${progress}%` }}>\n          <Emoji name=\"panda_face\" size=\"40\"/> \n          </div>\n\n        \n        </div>\n        <span class=\"tag-line\">You. You are my good days</span>\n      </div>\n      </div>\n      \n      \n  );\n}\n\nexport default Timer;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Timer } from \"./components/Timer\";\n\nfunction App() {\n  return (\n    <div className=\"\">\n      <Timer initialTime={new Date('2020-11-01T15:42:16.420Z')} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}